const validator = require('validator');
const isArray = require('./isArray');
const isDate = require('./isDate');
const isLength = require('./isLength');
const isNull = require('./isNull');
const isObject = require('./isObject');
const isRegExp = require('./isRegExp');
const isString = require('./isString');
const notExist = require('./notExist');

module.exports = {
  toDate: str => isString(str) ? validator.toDate(str) : false,
  toFloat: str => isString(str) ? validator.toFloat(str) : false,
  toInt: str => isString(str) ? validator.toInt(str) : false,
  toBoolean: () => isString(str) ? validator.toBoolean(str) : false,
  equals: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.equals(arguments[0], arguments[1]) : false },
  contains: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.contains(arguments[0], arguments[1]) : false },
  matches: function () { return isString(arguments[0]) && (isString(arguments[1]) || isRegExp(arguments[1])) ? validator.matches(arguments[0], arguments[1]) : false },
  isEmail: function () { return isString(arguments[0]) ? validator.isEmail(arguments[0]) : false },
  isURL: function () { return isString(arguments[0]) ? validator.isURL(arguments[0]) : false },
  isMACAddress: function () { return isString(arguments[0]) ? validator.isMACAddress(arguments[0]) : false },
  isIP: function () { return isString(arguments[0]) && validator.isIn(arguments[1] + '', ['4', '6']) ? validator.isIP(arguments[0]) : false },
  isIPRange: function () { return isString(arguments[0]) ? validator.isIPRange(arguments[0]) : false },
  isFQDN: function () { return isString(arguments[0]) ? validator.isFQDN(arguments[0]) : false },
  isBoolean: function () { return (typeof arguments[0] == 'boolean') ? true : false },
  isAlpha: function () { return isString(arguments[0]) ? validator.isAlpha(arguments[0]) : false },
  isAlphanumeric: function () { return isString(arguments[0]) ? validator.isAlphanumeric(arguments[0]) : false },
  isNumeric: function () { return (typeof arguments[0] == 'number') ? validator.isNumeric(arguments[0] + '') : false },
  isPort: function () { return isString(arguments[0]) ? validator.isPort(arguments[0]) : false },
  isLowercase: function () { return isString(arguments[0]) ? validator.isLowercase(arguments[0]) : false },
  isUppercase: function () { return isString(arguments[0]) ? validator.isUppercase(arguments[0]) : false },
  isAscii: function () { return isString(arguments[0]) ? validator.isAscii(arguments[0]) : false },
  isFullWidth: function () { return isString(arguments[0]) ? validator.isFullWidth(arguments[0]) : false },
  isHalfWidth: function () { return isString(arguments[0]) ? validator.isHalfWidth(arguments[0]) : false },
  isVariableWidth: function () { return isString(arguments[0]) ? validator.isVariableWidth(arguments[0]) : false },
  isMultibyte: function () { return isString(arguments[0]) ? validator.isMultibyte(arguments[0]) : false },
  isSurrogatePair: function () { return isString(arguments[0]) ? validator.isSurrogatePair(arguments[0]) : false },
  isInt: function () { return (typeof arguments[0] == 'number') ? validator.isInt(arguments[0] + '', isObject(arguments[1]) ? arguments[1] : void 0) : false },
  isFloat: function () { return (typeof arguments[0] == 'number') ? validator.isFloat(arguments[0] + '', isObject(arguments[1]) ? arguments[1] : void 0) : false },
  isDecimal: function () { return (typeof arguments[0] == 'number') ? validator.isDecimal(arguments[0] + '') : false },
  isHexadecimal: function () { return (typeof arguments[0] == 'number') ? validator.isHexadecimal(arguments[0] + '') : false },
  isDivisibleBy: function () { return (typeof arguments[0] == 'number') && validator.isNumeric(arguments[1] + '') ? validator.isDivisibleBy(arguments[0] + '', arguments[1]) : false },
  isHexColor: function () { return isString(arguments[0]) ? validator.isHexColor(arguments[0]) : false },
  isISRC: function () { return isString(arguments[0]) ? validator.isISRC(arguments[0]) : false },
  isMD5: function () { return isString(arguments[0]) ? validator.isMD5(arguments[0]) : false },
  isHash: function () { return isString(arguments[0]) && validator.isIn(arguments[1] + '', ['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128', 'tiger160', 'tiger192', 'crc32', 'crc32b']) ? validator.isHash(arguments[0], arguments[1]) : false },
  isJWT: function () { return isString(arguments[0]) ? validator.isJWT(arguments[0]) : false },
  isJSON: function () { return isString(arguments[0]) ? validator.isJSON(arguments[0]) : false },
  isEmpty: function () { return isString(arguments[0]) ? validator.isEmpty(arguments[0]) : false },
  isByteLength: function () { return isString(arguments[0]) && isObject(arguments[1]) ? validator.isByteLength(arguments[0], arguments[1]) : false },
  isUUID: function () { return isString(arguments[0]) ? validator.isUUID(arguments[0]) : false },
  isMongoId: function () { return isString(arguments[0]) ? validator.isMongoId(arguments[0]) : false },
  isAfter: function () { return isString(arguments[0]) ? validator.isAfter(arguments[0], (isString(arguments[1]) || isDate(arguments[1])) ? arguments[1] : void 0) : false },
  isBefore: function () { return isString(arguments[0]) ? validator.isBefore(arguments[0], (isString(arguments[1]) || isDate(arguments[1])) ? arguments[1] : void 0) : false },
  isIn: function () { return isString(arguments[0]) && isArray(arguments[1]) ? validator.isIn(arguments[0], arguments[1]) : false },
  isCreditCard: function () { return isString(arguments[0]) ? validator.isCreditCard(arguments[0]) : false },
  isIdentityCard: function () { return isString(arguments[0]) ? validator.isIdentityCard(arguments[0]) : false },
  isISIN: function () { return isString(arguments[0]) ? validator.isISIN(arguments[0]) : false },
  isISBN: function () { return isString(arguments[0]) ? validator.isISBN(arguments[0]) : false },
  isISSN: function () { return isString(arguments[0]) ? validator.isISSN(arguments[0]) : false },
  isMobilePhone: function () { return isString(arguments[0]) ? validator.isMobilePhone(arguments[0]) : false },
  isPostalCode: function () { return isString(arguments[0]) && validator.isIn(arguments[1] + '', ['AD', 'AT', 'AU', 'BE', 'BG', 'CA', 'CH', 'CZ', 'DE', 'DK', 'DZ', 'EE', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU', 'IL', 'IN', 'IS', 'IT', 'JP', 'KE', 'LI', 'LT', 'LU', 'LV', 'MX', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'SA', 'SE', 'SI', 'TN', 'TW', 'UA', 'US', 'ZA', 'ZM']) ? validator.isPostalCode(arguments[0]) : false },
  isCurrency: function () { return isString(arguments[0]) ? validator.isCurrency(arguments[0]) : false },
  isISO8601: function () { return isString(arguments[0]) ? validator.isISO8601(arguments[0]) : false },
  isRFC3339: function () { return isString(arguments[0]) ? validator.isRFC3339(arguments[0]) : false },
  isISO31661Alpha2: function () { return isString(arguments[0]) ? validator.isISO31661Alpha2(arguments[0]) : false },
  isISO31661Alpha3: function () { return isString(arguments[0]) ? validator.isISO31661Alpha3(arguments[0]) : false },
  isBase64: function () { return isString(arguments[0]) ? validator.isBase64(arguments[0]) : false },
  isDataURI: function () { return isString(arguments[0]) ? validator.isDataURI(arguments[0]) : false },
  isMagnetURI: function () { return isString(arguments[0]) ? validator.isMagnetURI(arguments[0]) : false },
  isMimeType: function () { return isString(arguments[0]) ? validator.isMimeType(arguments[0]) : false },
  isLatLong: function () { return isString(arguments[0]) ? validator.isLatLong(arguments[0]) : false },
  ltrim: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.ltrim(arguments[0], arguments[1]) : false },
  rtrim: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.rtrim(arguments[0], arguments[1]) : false },
  trim: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.trim(arguments[0], arguments[1]) : false },
  escape: function () { return isString(arguments[0]) ? validator.escape(arguments[0]) : false },
  unescape: function () { return isString(arguments[0]) ? validator.unescape(arguments[0]) : false },
  stripLow: function () { return isString(arguments[0]) ? validator.stripLow(arguments[0]) : false },
  whitelist: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.whitelist(arguments[0], arguments[1]) : false },
  blacklist: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.blacklist(arguments[0], arguments[1]) : false },
  isWhitelisted: function () { return isString(arguments[0]) && isString(arguments[1]) ? validator.isWhitelisted(arguments[0], arguments[1]) : false },
  normalizeEmail: function () { return isString(arguments[0]) ? validator.toFloat(arguments[0]) : false },
  isArray,
  isDate,
  isLength,
  isNull,
  isObject,
  isRegExp,
  isString,
  notExist
};
